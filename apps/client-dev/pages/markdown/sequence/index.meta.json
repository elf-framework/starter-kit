{
    "createdAt": 1671783524408,
    "title": "Sequence",
    "layout": "MarkdownReadLayout",
    "updatedAt": 1671790765679,
    "summary": "Mermaid can render sequence diagrams. The participants can be defined implicitly as in the first exa",
    "links": [],
    "body": "# This is sample code.\n\n-\n\n  \n# Sequence diagrams\n\n> A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order.\n\nMermaid can render sequence diagrams.\n\n```bash\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n```bash\nA note on nodes, the word \"end\" could potentially break the diagram, due to the way that the mermaid language is scripted.\n\nIf unavoidable, one must use parentheses(), quotation marks \"\", or brackets {},[], to enclose the word \"end\". i.e : (end), [end], {end}.\n```\n\n\n## Syntax\n\n### Participants\n\nThe participants can be defined implicitly as in the first example on this page. The participants or actors are\nrendered in order of appearance in the diagram source text. Sometimes you might want to show the participants in a\ndifferent order than how they appear in the first message. It is possible to specify the actor's order of\nappearance by doing the following:\n\n```bash\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>Bob: Hi Bob\n    Bob->>Alice: Hi Alice\n```\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>Bob: Hi Bob\n    Bob->>Alice: Hi Alice\n```\n\n### Actors\n\nIf you specifically want to use the actor symbol instead of a rectangle with text you can do so by using actor statements as per below.\n\n```bash\nsequenceDiagram\n    actor Alice\n    actor Bob\n    Alice->>Bob: Hi Bob\n    Bob->>Alice: Hi Alice\n```\n\n```mermaid\nsequenceDiagram\n    actor Alice\n    actor Bob\n    Alice->>Bob: Hi Bob\n    Bob->>Alice: Hi Alice\n```\n\n### Aliases\n\nThe actor can have a convenient identifier and a descriptive label.\n\n```bash\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n\n```mermaid\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n## Messages\n\nMessages can be of two displayed either solid or with a dotted line.\n\n```\n[Actor][Arrow][Actor]:Message text\n```\n\nThere are six types of arrows currently supported:\n\n| Type | Description                                      |\n| ---- | ------------------------------------------------ |\n| ->   | Solid line without arrow                         |\n| -->  | Dotted line without arrow                        |\n| ->>  | Solid line with arrowhead                        |\n| -->> | Dotted line with arrowhead                       |\n| -x   | Solid line with a cross at the end               |\n| --x  | Dotted line with a cross at the end.             |\n| -)   | Solid line with an open arrow at the end (async) |\n| --)  | Dotted line with a open arrow at the end (async) |\n\n\n## Activations\n\nIt is possible to activate and deactivate an actor. (de)activation can be dedicated declarations:\n\n```bash\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\nThere is also a shortcut notation by appending `+`/`-` suffix to the message arrow:\n\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\nActivations can be stacked for same actor:\n\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n## Notes\n\nIt is possible to add notes to a sequence diagram. This is done by the notation\nNote [ right of | left of | over ] [Actor]: Text in note content\n\nSee the example below:\n\n```mermaid\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\nIt is also possible to create notes spanning two participants:\n\n```mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n## Loops\n\nIt is possible to express loops in a sequence diagram. This is done by the notation\n\n```\nloop Loop text\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n## Alt\n\nIt is possible to express alternative paths in a sequence diagram. This is done by the notation\n\n```\nalt Describing text\n... statements ...\nelse\n... statements ...\nend\n```\n\nor if there is sequence that is optional (if without else).\n\n```\nopt Describing text\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n## Parallel\n\nIt is possible to show actions that are happening in parallel.\n\nThis is done by the notation\n\n```\npar [Action 1]\n... statements ...\nand [Action 2]\n... statements ...\nand [Action N]\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Hello guys!\n    and Alice to John\n        Alice->>John: Hello guys!\n    end\n    Bob-->>Alice: Hi Alice!\n    John-->>Alice: Hi Alice!\n```\n\nIt is also possible to nest parallel blocks.\n\n```mermaid\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Go help John\n    and Alice to John\n        Alice->>John: I want this done today\n        par John to Charlie\n            John->>Charlie: Can we do this today?\n        and John to Diana\n            John->>Diana: Can you help us today?\n        end\n    end\n```\n\n## Critical Region\n\nIt is possible to show actions that must happen automatically with conditional handling of circumstances.\n\nThis is done by the notation\n\n```\ncritical [Action that must be performed]\n... statements ...\noption [Circumstance A]\n... statements ...\noption [Circumstance B]\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    option Network timeout\n        Service-->Service: Log error\n    option Credentials rejected\n        Service-->Service: Log different error\n    end\n```\n\nIt is also possible to have no options at all\n\n```mermaid\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    end\n```\n\nThis critical block can also be nested, equivalently to the `par` statement as seen above.\n\n## Break\n\nIt is possible to indicate a stop of the sequence within the flow (usually used to model exceptions).\n\nThis is done by the notation\n\n```\nbreak [something happened]\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid\nsequenceDiagram\n    Consumer-->API: Book something\n    API-->BookingService: Start booking process\n    break when the booking process fails\n        API-->Consumer: show failure\n    end\n    API-->BillingService: Start billing process\n```\n\n## Background Highlighting\n\nIt is possible to highlight flows by providing colored background rects. This is done by the notation\n\nThe colors are defined using rgb and rgba syntax.\n\n```\nrect rgb(0, 255, 0)\n... content ...\nend\n```\n\n```\nrect rgba(0, 0, 255, .1)\n... content ...\nend\n```\n\nSee the examples below:\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant John\n\n    rect rgb(191, 223, 255)\n    note right of Alice: Alice calls John.\n    Alice->>+John: Hello John, how are you?\n    rect rgb(200, 150, 255)\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    end\n    John-->>-Alice: I feel great!\n    end\n    Alice ->>+ John: Did you want to go to the game tonight?\n    John -->>- Alice: Yeah! See you there.\n\n```\n\n## Comments\n\nComments can be entered within a sequence diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any diagram syntax\n\n```bash\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    %% this is a comment\n    John-->>Alice: Great!\n```\n\n## Entity codes to escape characters\n\nIt is possible to escape characters using the syntax exemplified here.\n\n```mermaid\nsequenceDiagram\n    A->>B: I #9829; you!\n    B->>A: I #9829; you #infin; times more!\n```\n\nNumbers given are base 10, so `#` can be encoded as `#35;`. It is also supported to use HTML character names.\n\nBecause semicolons can be used instead of line breaks to define the markup, you need to use `#59;` to include a semicolon in message text.\n\n## sequenceNumbers\n\nIt is possible to get a sequence number attached to each arrow in a sequence diagram. This can be configured when adding mermaid to the website as shown below:\n\n```html\n<script>\n  mermaid.initialize({ sequence: { showSequenceNumbers: true } });\n</script>\n```\n\nIt can also be be turned on via the diagram code as in the diagram:\n\n```mermaid\nsequenceDiagram\n    autonumber\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n## Actor Menus\n\nActors can have popup-menus containing individualized links to external pages. For example, if an actor represented a web service, useful links might include a link to the service health dashboard, repo containing the code for the service, or a wiki page describing the service.\n\nThis can be configured by adding one or more link lines with the format:\n\n```\nlink <actor>: <link-label> @ <link-url>\n```\n\n```bash\nsequenceDiagram\n    participant Alice\n    participant John\n    link Alice: Dashboard @ https://dashboard.contoso.com/alice\n    link Alice: Wiki @ https://wiki.contoso.com/alice\n    link John: Dashboard @ https://dashboard.contoso.com/john\n    link John: Wiki @ https://wiki.contoso.com/john\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n#### Advanced Menu Syntax\n\nThere is an advanced syntax that relies on JSON formatting. If you are comfortable with JSON format, then this exists as well.\n\nThis can be configured by adding the links lines with the format:\n\n```\nlinks <actor>: <json-formatted link-name link-url pairs>\n```\n\nAn example is below:\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant John\n    links Alice: {\"Dashboard\": \"https://dashboard.contoso.com/alice\", \"Wiki\": \"https://wiki.contoso.com/alice\"}\n    links John: {\"Dashboard\": \"https://dashboard.contoso.com/john\", \"Wiki\": \"https://wiki.contoso.com/john\"}\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n## Styling\n\nStyling of a sequence diagram is done by defining a number of css classes. During rendering these classes are extracted from the file located at src/themes/sequence.scss\n\n### Classes used\n\n| Class        | Description                                                 |\n| ------------ | ----------------------------------------------------------- |\n| actor        | Style for the actor box at the top of the diagram.          |\n| text.actor   | Styles for text in the actor box at the top of the diagram. |\n| actor-line   | The vertical line for an actor.                             |\n| messageLine0 | Styles for the solid message line.                          |\n| messageLine1 | Styles for the dotted message line.                         |\n| messageText  | Defines styles for the text on the message arrows.          |\n| labelBox     | Defines styles label to left in a loop.                     |\n| labelText    | Styles for the text in label for loops.                     |\n| loopText     | Styles for the text in the loop box.                        |\n| loopLine     | Defines styles for the lines in the loop box.               |\n| note         | Styles for the note box.                                    |\n| noteText     | Styles for the text on in the note boxes.                   |\n\n### Sample stylesheet\n\n```css showLineNumbers\nbody {\n  background: white;\n}\n\n.actor {\n  stroke: #ccccff;\n  fill: #ececff;\n}\ntext.actor {\n  fill: black;\n  stroke: none;\n  font-family: Helvetica;\n}\n\n.actor-line {\n  stroke: grey;\n}\n\n.messageLine0 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: black;\n}\n\n.messageLine1 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  stroke: black;\n}\n\n#arrowhead {\n  fill: black;\n}\n\n.messageText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n\n.labelBox {\n  stroke: #ccccff;\n  fill: #ececff;\n}\n\n.labelText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopLine {\n  stroke-width: 2;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: #ccccff;\n}\n\n.note {\n  stroke: #decc93;\n  fill: #fff5ad;\n}\n\n.noteText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n```",
    "editableSourceLink": true
}