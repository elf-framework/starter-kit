{
    "createdAt": 1671782899979,
    "title": "Flowchart",
    "layout": "MarkdownReadLayout",
    "updatedAt": 1671783212289,
    "summary": "All Flowcharts are composed of  , the geometric shapes and  , the arrows or lines. The mermaid code ",
    "links": [
        {
            "title": "workaround",
            "url": "https://github.com/mermaid-js/mermaid/issues/1444#issuecomment-639528897"
        },
        {
            "title": "this jsfiddle",
            "url": "https://jsfiddle.net/s37cjoau/3/"
        },
        {
            "title": "Shapes",
            "url": "https://github.com/d3/d3-shape/blob/main/README.md#curves"
        },
        {
            "title": "d3-shape",
            "url": "https://github.com/d3/d3-shape/"
        }
    ],
    "body": "# Flowcharts - Basic Syntax\n\nAll Flowcharts are composed of **nodes**, the geometric shapes and **edges**, the arrows or lines. The mermaid code defines the way that these **nodes** and **edges** are made and interact.\n\nIt can also accommodate different arrow types, multi directional arrows, and linking to and from subgraphs.\n\n> **Important note**: Do not type the word \"end\" as a Flowchart node. Capitalize all or any one the letters to keep the flowchart from breaking, i.e, \"End\" or \"END\". Or you can apply this [workaround](https://github.com/mermaid-js/mermaid/issues/1444#issuecomment-639528897).\n\n### A node (default)\n\n```mermaid\nflowchart LR\n    id\n```\n\n> **Note** The id is what is displayed in the box.\n\n### A node with text\n\nIt is also possible to set text in the box that differs from the id. If this is done several times, it is the last text\nfound for the node that will be used. Also if you define edges for the node later on, you can omit text definitions. The\none previously defined will be used when rendering the box.\n\n```mermaid\nflowchart LR\n    id1[This is the text in the box]\n```\n\n## Graph\n\nThis statement declares the direction of the Flowchart.\n\nThis declares the flowchart is oriented from top to bottom (`TD` or `TB`).\n\n```mermaid\nflowchart TD\n    Start --> Stop\n```\n\nThis declares the flowchart is oriented from left to right (`LR`).\n\n```mermaid\nflowchart LR\n    Start --> Stop\n```\n\n## Flowchart Orientation\n\nPossible FlowChart orientations are:\n\n- TB - top to bottom\n- TD - top-down/ same as top to bottom\n- BT - bottom to top\n- RL - right to left\n- LR - left to right\n\n## Node shapes\n\n### A node with round edges\n\n```mermaid\nflowchart LR\n    id1(This is the text in the box)\n```\n\n### A stadium-shaped node\n\n```mermaid\nflowchart LR\n    id1([This is the text in the box])\n```\n\n### A node in a subroutine shape\n\n```mermaid\nflowchart LR\n    id1[[This is the text in the box]]\n```\n\n### A node in a cylindrical shape\n\n```mermaid\nflowchart LR\n    id1[(Database)]\n```\n\n### A node in the form of a circle\n\n```mermaid\nflowchart LR\n    id1((This is the text in the circle))\n```\n\n### A node in an asymmetric shape\n\n```mermaid\nflowchart LR\n    id1>This is the text in the box]\n```\n\nCurrently only the shape above is possible and not its mirror. _This might change with future releases._\n\n### A node (rhombus)\n\n```mermaid\nflowchart LR\n    id1{This is the text in the box}\n```\n\n### A hexagon node\n\nCode:\n\n```bash\nflowchart LR\n    id1{{This is the text in the box}}\n```\n\nRender:\n\n```mermaid\nflowchart LR\n    id1{{This is the text in the box}}\n```\n\n### Parallelogram\n\n```mermaid\nflowchart TD\n    id1[/This is the text in the box/]\n```\n\n### Parallelogram alt\n\n```mermaid\nflowchart TD\n    id1[\\This is the text in the box\\]\n```\n\n### Trapezoid\n\n```mermaid\nflowchart TD\n    A[/Christmas\\]\n```\n\n### Trapezoid alt\n\n```mermaid\nflowchart TD\n    B[\\Go shopping/]\n```\n\n### Double circle\n\n```mermaid\nflowchart TD\n    id1(((This is the text in the circle)))\n```\n\n## Links between nodes\n\nNodes can be connected with links/edges. It is possible to have different types of links or attach a text string to a link.\n\n### A link with arrow head\n\n```mermaid\nflowchart LR\n    A-->B\n```\n\n### An open link\n\n```mermaid\nflowchart LR\n    A --- B\n```\n\n### Text on links\n\n```mermaid\nflowchart LR\n    A-- This is the text! ---B\n```\n\nor\n\n```mermaid\nflowchart LR\n    A---|This is the text|B\n```\n\n### A link with arrow head and text\n\n```mermaid\nflowchart LR\n    A-->|text|B\n```\n\nor\n\n```mermaid\nflowchart LR\n    A-- text -->B\n```\n\n### Dotted link\n\n```mermaid\nflowchart LR\n   A-.->B;\n```\n\n### Dotted link with text\n\n```mermaid\nflowchart LR\n   A-. text .-> B\n```\n\n### Thick link\n\n```mermaid\nflowchart LR\n   A ==> B\n```\n\n### Thick link with text\n\n```mermaid\nflowchart LR\n   A == text ==> B\n```\n\n### Chaining of links\n\nIt is possible declare many links in the same line as per below:\n\n```mermaid\nflowchart LR\n   A -- text --> B -- text2 --> C\n```\n\nIt is also possible to declare multiple nodes links in the same line as per below:\n\n```mermaid\nflowchart LR\n   a --> b & c--> d\n```\n\nYou can then describe dependencies in a very expressive way. Like the one-liner below:\n\n```mermaid\nflowchart TB\n    A & B--> C & D\n```\n\nIf you describe the same diagram using the the basic syntax, it will take four lines. A\nword of warning, one could go overboard with this making the flowchart harder to read in\nmarkdown form. The Swedish word `lagom` comes to mind. It means, not too much and not too little.\nThis goes for expressive syntaxes as well.\n\n```bash\nflowchart TB\n    A --> C\n    A --> D\n    B --> C\n    B --> D\n```\n\n### New arrow types\n\nThere are new types of arrows supported as per below:\n\n```mermaid\nflowchart LR\n    A --o B\n    B --x C\n```\n\n### Multi directional arrows\n\nThere is the possibility to use multidirectional arrows.\n\n```mermaid\nflowchart LR\n    A o--o B\n    B <--> C\n    C x--x D\n```\n\n### Minimum length of a link\n\nEach node in the flowchart is ultimately assigned to a rank in the rendered\ngraph, i.e. to a vertical or horizontal level (depending on the flowchart\norientation), based on the nodes to which it is linked. By default, links\ncan span any number of ranks, but you can ask for any link to be longer\nthan the others by adding extra dashes in the link definition.\n\nIn the following example, two extra dashes are added in the link from node _B_\nto node _E_, so that it spans two more ranks than regular links:\n\n```mermaid\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -->|Yes| C[OK]\n    C --> D[Rethink]\n    D --> B\n    B ---->|No| E[End]\n```\n\n> **Note** Links may still be made longer than the requested number of ranks\n> by the rendering engine to accommodate other requests.\n\nWhen the link label is written in the middle of the link, the extra dashes must\nbe added on the right side of the link. The following example is equivalent to\nthe previous one:\n\n```mermaid\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -- Yes --> C[OK]\n    C --> D[Rethink]\n    D --> B\n    B -- No ----> E[End]\n```\n\nFor dotted or thick links, the characters to add are equals signs or dots,\nas summed up in the following table:\n\n| Length            |   1    |    2    |    3     |\n| ----------------- | :----: | :-----: | :------: |\n| Normal            | `---`  | `----`  | `-----`  |\n| Normal with arrow | `-->`  | `--->`  | `---->`  |\n| Thick             | `===`  | `====`  | `=====`  |\n| Thick with arrow  | `==>`  | `===>`  | `====>`  |\n| Dotted            | `-.-`  | `-..-`  | `-...-`  |\n| Dotted with arrow | `-.->` | `-..->` | `-...->` |\n\n## Special characters that break syntax\n\nIt is possible to put text within quotes in order to render more troublesome characters. As in the example below:\n\n```mermaid\nflowchart LR\n    id1[\"This is the (text) in the box\"]\n```\n\n### Entity codes to escape characters\n\nIt is possible to escape characters using the syntax exemplified here.\n\n```mermaid\n    flowchart LR\n        A[\"A double quote:#quot;\"] -->B[\"A dec char:#9829;\"]\n```\n\nNumbers given are base 10, so `#` can be encoded as `#35;`. It is also supported to use HTML character names.\n\n## Subgraphs\n\n```\nsubgraph title\n    graph definition\nend\n```\n\nAn example below:\n\n```mermaid\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n```\n\nYou can also set an explicit id for the subgraph.\n\n```mermaid\nflowchart TB\n    c1-->a2\n    subgraph ide1 [one]\n    a1-->a2\n    end\n```\n\n## flowcharts\n\nWith the graphtype flowchart it is also possible to set edges to and from subgraphs as in the flowchart below.\n\n```mermaid\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n    one --> two\n    three --> two\n    two --> c2\n```\n\n## Direction in subgraphs\n\nWith the graphtype flowcharts you can use the direction statement to set the direction which the subgraph will render like in this example.\n\n```mermaid\nflowchart LR\n  subgraph TOP\n    direction TB\n    subgraph B1\n        direction RL\n        i1 -->f1\n    end\n    subgraph B2\n        direction BT\n        i2 -->f2\n    end\n  end\n  A --> TOP --> B\n  B1 --> B2\n```\n\n## Interaction\n\nIt is possible to bind a click event to a node, the click can lead to either a javascript callback or to a link which will be opened in a new browser tab. **Note**: This functionality is disabled when using `securityLevel='strict'` and enabled when using `securityLevel='loose'`.\n\n```\nclick nodeId callback\nclick nodeId call callback()\n```\n\n- nodeId is the id of the node\n- callback is the name of a javascript function defined on the page displaying the graph, the function will be called with the nodeId as parameter.\n\nExamples of tooltip usage below:\n\n```html\n<script>\n  const callback = function () {\n    alert('A callback was triggered');\n  };\n</script>\n```\n\nThe tooltip text is surrounded in double quotes. The styles of the tooltip are set by the class `.mermaidTooltip`.\n\n```mermaid\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    click A callback \"Tooltip for a callback\"\n    click B \"https://www.github.com\" \"This is a tooltip for a link\"\n    click A call callback() \"Tooltip for a callback\"\n    click B href \"https://www.github.com\" \"This is a tooltip for a link\"\n```\n\n> **Success** The tooltip functionality and the ability to link to urls are available from version 0.5.2.\n\n?> Due to limitations with how Docsify handles JavaScript callback functions, an alternate working demo for the above code can be viewed at [this jsfiddle](https://jsfiddle.net/s37cjoau/3/).\n\nLinks are opened in the same browser tab/window by default. It is possible to change this by adding a link target to the click definition (`_self`, `_blank`, `_parent` and `_top` are supported):\n\n```mermaid\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    D-->E\n    click A \"https://www.github.com\" _blank\n    click B \"https://www.github.com\" \"Open this in a new tab\" _blank\n    click C href \"https://www.github.com\" _blank\n    click D href \"https://www.github.com\" \"Open this in a new tab\" _blank\n```\n\nBeginner's tip—a full example using interactive links in a html context:\n\n```html\n<body>\n  <pre class=\"mermaid\">\n    flowchart LR\n        A-->B\n        B-->C\n        C-->D\n        click A callback \"Tooltip\"\n        click B \"https://www.github.com\" \"This is a link\"\n        click C call callback() \"Tooltip\"\n        click D href \"https://www.github.com\" \"This is a link\"\n  </pre>\n\n  <script>\n    const callback = function () {\n      alert('A callback was triggered');\n    };\n    const config = {\n      startOnLoad: true,\n      flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n### Comments\n\nComments can be entered within a flow diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any flow syntax\n\n```bash\nflowchart LR\n%% this is a comment A -- text --> B{node}\n   A -- text --> B -- text2 --> C\n```\n\n## Styling and classes\n\n### Styling links\n\nIt is possible to style links. For instance, you might want to style a link that is going backwards in the flow. As links\nhave no ids in the same way as nodes, some other way of deciding what style the links should be attached to is required.\nInstead of ids, the order number of when the link was defined in the graph is used, or use default to apply to all links.\nIn the example below the style defined in the linkStyle statement will belong to the fourth link in the graph:\n\n```\nlinkStyle 3 stroke:#ff3,stroke-width:4px,color:red;\n```\n\n### Styling line curves\n\nIt is possible to style the type of curve used for lines between items, if the default method does not meet your needs.\nAvailable curve styles include `basis`, `bump`, `linear`, `monotoneX`, `monotoneY`, `natural`, `step`, `stepAfter`,\nand `stepBefore`.\n\nIn this example, a left-to-right graph uses the `stepBefore` curve style:\n\n```\n%%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%\ngraph LR\n```\n\nFor a full list of available curves, including an explanation of custom curves, refer to\nthe [Shapes](https://github.com/d3/d3-shape/blob/main/README.md#curves) documentation in the\n[d3-shape](https://github.com/d3/d3-shape/) project.\n\n### Styling a node\n\nIt is possible to apply specific styles such as a thicker border or a different background color to a node.\n\n```mermaid\nflowchart LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n#### Classes\n\nMore convenient than defining the style every time is to define a class of styles and attach this class to the nodes that\nshould have a different look.\n\na class definition looks like the example below:\n\n```\n    classDef className fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\nAttachment of a class to a node is done as per below:\n\n```\n    class nodeId1 className;\n```\n\nIt is also possible to attach a class to a list of nodes in one statement:\n\n```\n    class nodeId1,nodeId2 className;\n```\n\nA shorter form of adding a class is to attach the classname to the node using the `:::`operator as per below:\n\n```mermaid\nflowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96\n```\n\n### Css classes\n\nIt is also possible to predefine classes in css styles that can be applied from the graph definition as in the example\nbelow:\n\n**Example style**\n\n```html\n<style>\n  .cssClass > rect {\n    fill: #ff0000;\n    stroke: #ffff00;\n    stroke-width: 4px;\n  }\n</style>\n```\n\n**Example definition**\n\n```mermaid\nflowchart LR\n    A-->B[AAA<span>BBB</span>]\n    B-->D\n    class A cssClass\n```\n\n### Default class\n\nIf a class is named default it will be assigned to all classes without specific class definitions.\n\n```\n    classDef default fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\n## Basic support for fontawesome\n\nIt is possible to add icons from fontawesome.\n\nThe icons are accessed via the syntax fa:#icon class name#.\n\n```mermaid\nflowchart TD\n    B[\"fab:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner)\n    B-->E(A fa:fa-camera-retro perhaps?)\n```\n\n?> Mermaid is now only compatible with Font Awesome versions 4 and 5. Check that you are using the correct version of Font Awesome.\n\n## Graph declarations with spaces between vertices and link and without semicolon\n\n- In graph declarations, the statements also can now end without a semicolon. After release 0.2.16, ending a graph statement with semicolon is just optional. So the below graph declaration is also valid along with the old declarations of the graph.\n\n- A single space is allowed between vertices and the link. However there should not be any space between a vertex and its text and a link and its text. The old syntax of graph declaration will also work and hence this new feature is optional and is introduced to improve readability.\n\nBelow is the new declaration of the graph edges which is also valid along with the old declaration of the graph edges.\n\n```mermaid\nflowchart LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n\n## Configuration...\n\nIt is possible to adjust the width of the rendered flowchart.\n\nThis is done by defining **mermaid.flowchartConfig** or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the mermaidCLI page.\nmermaid.flowchartConfig can be set to a JSON string with config parameters or the corresponding object.\n\n```javascript\nmermaid.flowchartConfig = {\n    width: 100%\n}\n```\n"
}